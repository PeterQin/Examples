//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3053
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://Miscrosoft.ServiceModel.Samples", ConfigurationName="ICalculator")]
public interface ICalculator
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Miscrosoft.ServiceModel.Samples/ICalculator/Add", ReplyAction="http://Miscrosoft.ServiceModel.Samples/ICalculator/AddResponse")]
    double Add(double aOriginal, double aFactor);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Miscrosoft.ServiceModel.Samples/ICalculator/Subtract", ReplyAction="http://Miscrosoft.ServiceModel.Samples/ICalculator/SubtractResponse")]
    double Subtract(double aOriginal, double aFactor);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Miscrosoft.ServiceModel.Samples/ICalculator/Multiply", ReplyAction="http://Miscrosoft.ServiceModel.Samples/ICalculator/MultiplyResponse")]
    double Multiply(double aOriginal, double aFactor);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Miscrosoft.ServiceModel.Samples/ICalculator/Divide", ReplyAction="http://Miscrosoft.ServiceModel.Samples/ICalculator/DivideResponse")]
    double Divide(double aOriginal, double aFactor);
    
    // CODEGEN: 消息 RequestFileInfo 的包装名称(RequestFileInfo)以后生成的消息协定与默认值(DownloadFileWithMsgContract)不匹配
    [System.ServiceModel.OperationContractAttribute(Action="http://Miscrosoft.ServiceModel.Samples/ICalculator/DownloadFileWithMsgContract", ReplyAction="http://Miscrosoft.ServiceModel.Samples/ICalculator/DownloadFileWithMsgContractRes" +
        "ponse")]
    ResponseFileInfo DownloadFileWithMsgContract(RequestFileInfo request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Miscrosoft.ServiceModel.Samples/ICalculator/DownloadFileSpical", ReplyAction="http://Miscrosoft.ServiceModel.Samples/ICalculator/DownloadFileSpicalResponse")]
    System.IO.Stream DownloadFileSpical(string aFileName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Miscrosoft.ServiceModel.Samples/ICalculator/DownloadFileSpicalWithLength", ReplyAction="http://Miscrosoft.ServiceModel.Samples/ICalculator/DownloadFileSpicalWithLengthRe" +
        "sponse")]
    System.IO.Stream DownloadFileSpicalWithLength(string aFileName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Miscrosoft.ServiceModel.Samples/ICalculator/FileSpicalSize", ReplyAction="http://Miscrosoft.ServiceModel.Samples/ICalculator/FileSpicalSizeResponse")]
    long FileSpicalSize(string aFileName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Miscrosoft.ServiceModel.Samples/ICalculator/DownloadFileWithCustomStream", ReplyAction="http://Miscrosoft.ServiceModel.Samples/ICalculator/DownloadFileWithCustomStreamRe" +
        "sponse")]
    System.IO.Stream DownloadFileWithCustomStream(string aFilePath, long aOffset, long aCount);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Miscrosoft.ServiceModel.Samples/ICalculator/GetFiles", ReplyAction="http://Miscrosoft.ServiceModel.Samples/ICalculator/GetFilesResponse")]
    string[] GetFiles(string aPath, string aSearchPattern, System.IO.SearchOption aSearchOption);
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName="RequestFileInfo", WrapperNamespace="http://Miscrosoft.ServiceModel.Samples", IsWrapped=true)]
public partial class RequestFileInfo
{
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Miscrosoft.ServiceModel.Samples", Order=0)]
    public string FileName;
    
    public RequestFileInfo()
    {
    }
    
    public RequestFileInfo(string FileName)
    {
        this.FileName = FileName;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName="ResponseFileInfo", WrapperNamespace="http://Miscrosoft.ServiceModel.Samples", IsWrapped=true)]
public partial class ResponseFileInfo
{
    
    [System.ServiceModel.MessageHeaderAttribute(Namespace="http://Miscrosoft.ServiceModel.Samples")]
    public long FileLength;
    
    [System.ServiceModel.MessageHeaderAttribute(Namespace="http://Miscrosoft.ServiceModel.Samples")]
    public string FileName;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Miscrosoft.ServiceModel.Samples", Order=0)]
    public System.IO.Stream FFileContent;
    
    public ResponseFileInfo()
    {
    }
    
    public ResponseFileInfo(long FileLength, string FileName, System.IO.Stream FFileContent)
    {
        this.FileLength = FileLength;
        this.FileName = FileName;
        this.FFileContent = FFileContent;
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface ICalculatorChannel : ICalculator, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class CalculatorClient : System.ServiceModel.ClientBase<ICalculator>, ICalculator
{
    
    public CalculatorClient()
    {
    }
    
    public CalculatorClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public CalculatorClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public double Add(double aOriginal, double aFactor)
    {
        return base.Channel.Add(aOriginal, aFactor);
    }
    
    public double Subtract(double aOriginal, double aFactor)
    {
        return base.Channel.Subtract(aOriginal, aFactor);
    }
    
    public double Multiply(double aOriginal, double aFactor)
    {
        return base.Channel.Multiply(aOriginal, aFactor);
    }
    
    public double Divide(double aOriginal, double aFactor)
    {
        return base.Channel.Divide(aOriginal, aFactor);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    ResponseFileInfo ICalculator.DownloadFileWithMsgContract(RequestFileInfo request)
    {
        return base.Channel.DownloadFileWithMsgContract(request);
    }
    
    public long DownloadFileWithMsgContract(ref string FileName, out System.IO.Stream FFileContent)
    {
        RequestFileInfo inValue = new RequestFileInfo();
        inValue.FileName = FileName;
        ResponseFileInfo retVal = ((ICalculator)(this)).DownloadFileWithMsgContract(inValue);
        FileName = retVal.FileName;
        FFileContent = retVal.FFileContent;
        return retVal.FileLength;
    }
    
    public System.IO.Stream DownloadFileSpical(string aFileName)
    {
        return base.Channel.DownloadFileSpical(aFileName);
    }
    
    public System.IO.Stream DownloadFileSpicalWithLength(string aFileName)
    {
        return base.Channel.DownloadFileSpicalWithLength(aFileName);
    }
    
    public long FileSpicalSize(string aFileName)
    {
        return base.Channel.FileSpicalSize(aFileName);
    }
    
    public System.IO.Stream DownloadFileWithCustomStream(string aFilePath, long aOffset, long aCount)
    {
        return base.Channel.DownloadFileWithCustomStream(aFilePath, aOffset, aCount);
    }
    
    public string[] GetFiles(string aPath, string aSearchPattern, System.IO.SearchOption aSearchOption)
    {
        return base.Channel.GetFiles(aPath, aSearchPattern, aSearchOption);
    }
}
